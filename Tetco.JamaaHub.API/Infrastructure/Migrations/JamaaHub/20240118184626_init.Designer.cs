// <auto-generated />
using System;
using Infrastructure.DataPersistence.JameahHub;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations.JamaaHub
{
    [DbContext(typeof(JamaaHubDbContext))]
    [Migration("20240118184626_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationGroup<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Groups", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationPermission<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRolePermission<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermissionId" }, "IX_RolePermissions_PermissionId");

                    b.HasIndex(new[] { "RoleId" }, "IX_RolePermissions_RoleId");

                    b.ToTable("RolePermissions", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUserGroup<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups", "Identity");
                });

            modelBuilder.Entity("Domain.Entities.Hub.Log.HubLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogStack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SysCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Logs", "Hub");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgentApiAccessKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AgentServiceUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstituteCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InstituteCode");

                    b.ToTable("Agents", "Hub");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HubAgentId")
                        .HasColumnType("int");

                    b.Property<string>("HubAgentSchemaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HubAgentId");

                    b.HasIndex("HubAgentSchemaId");

                    b.ToTable("AgentBatches", "Hub");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasInValidrecords")
                        .HasColumnType("bit");

                    b.Property<long>("HubAgentBatchId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumofInvalidrecords")
                        .HasColumnType("int");

                    b.Property<string>("PackageData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HubAgentBatchId");

                    b.ToTable("AgentPackages", "Hub");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentSchema", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HubAgentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("HubAgentId");

                    b.ToTable("AgentSchemaTypes", "Hub");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRolePermission<System.Guid>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationPermission<System.Guid>", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUserGroup<System.Guid>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationGroup<System.Guid>", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentBatch", b =>
                {
                    b.HasOne("Domain.Entities.Hub.UniversityAgent.HubAgent", "HubAgent")
                        .WithMany()
                        .HasForeignKey("HubAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Hub.UniversityAgent.HubAgentSchema", "HubAgentSchema")
                        .WithMany()
                        .HasForeignKey("HubAgentSchemaId");

                    b.OwnsOne("Domain.Entities.Hub.UniversityAgent.ValueObjects.BatchAnalysisMetaData", "AnalysisMetaData", b1 =>
                        {
                            b1.Property<long>("HubAgentBatchId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("ComplatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("NumOfAnalysedPackages")
                                .HasColumnType("int");

                            b1.Property<string>("Status")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("startAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("HubAgentBatchId");

                            b1.ToTable("AgentBatches", "Hub");

                            b1.WithOwner()
                                .HasForeignKey("HubAgentBatchId");
                        });

                    b.OwnsOne("Domain.Entities.Hub.UniversityAgent.ValueObjects.BatchSyncMetaData", "SyncMetaData", b1 =>
                        {
                            b1.Property<long>("HubAgentBatchId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("ComplatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("NumOfSyncedPackages")
                                .HasColumnType("int");

                            b1.Property<int?>("NumOfValidPackages")
                                .HasColumnType("int");

                            b1.Property<string>("Status")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("startAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("HubAgentBatchId");

                            b1.ToTable("AgentBatches", "Hub");

                            b1.WithOwner()
                                .HasForeignKey("HubAgentBatchId");
                        });

                    b.OwnsOne("Domain.Entities.Hub.UniversityAgent.ValueObjects.BatchTransferMetaData", "TransferMetaData", b1 =>
                        {
                            b1.Property<long>("HubAgentBatchId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("ComplatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<int>("NumOfTotalPackages")
                                .HasColumnType("int");

                            b1.Property<int>("NumOfTotalRecords")
                                .HasColumnType("int");

                            b1.Property<int>("NumOfTransferedPackages")
                                .HasColumnType("int");

                            b1.Property<string>("Status")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime>("startAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("HubAgentBatchId");

                            b1.ToTable("AgentBatches", "Hub");

                            b1.WithOwner()
                                .HasForeignKey("HubAgentBatchId");
                        });

                    b.Navigation("AnalysisMetaData");

                    b.Navigation("HubAgent");

                    b.Navigation("HubAgentSchema");

                    b.Navigation("SyncMetaData");

                    b.Navigation("TransferMetaData");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentPackage", b =>
                {
                    b.HasOne("Domain.Entities.Hub.UniversityAgent.HubAgentBatch", "HubAgentBatch")
                        .WithMany()
                        .HasForeignKey("HubAgentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Hub.UniversityAgent.ValueObjects.PackageMetaData", "MetaData", b1 =>
                        {
                            b1.Property<long>("HubAgentPackageId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("AgentSentAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("CompletedAnalysisAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("CompletedSyncingAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("HubrRceivedAt")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsAnalysed")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSynced")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("StartedAnalysisAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("StartedSyncingAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("HubAgentPackageId");

                            b1.ToTable("AgentPackages", "Hub");

                            b1.WithOwner()
                                .HasForeignKey("HubAgentPackageId");
                        });

                    b.Navigation("HubAgentBatch");

                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgentSchema", b =>
                {
                    b.HasOne("Domain.Entities.Hub.UniversityAgent.HubAgent", "HubAgent")
                        .WithMany("SchemaTypes")
                        .HasForeignKey("HubAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubAgent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationGroup<System.Guid>", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationPermission<System.Guid>", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Abd.CleanArchitecture.Kernel.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Domain.Entities.Hub.UniversityAgent.HubAgent", b =>
                {
                    b.Navigation("SchemaTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
