// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Application.Common.Interfaces.AsasLandingzoneDb;
using Application.Common.Interfaces.AsasLandingzoneDb.Dtos;
using Domain.Entities.AsasLandZone;
using Domain.Enums;
using Infrastructure.AgentDataModels.Configurations;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Data;

namespace Infrastructure.AgentDataModels;

public partial class AsasLandZoneDb : DbContext, IAsasLandZoneDb
{
    private readonly ILogger<IAsasLandZoneDb> _logger;

    public AsasLandZoneDb(DbContextOptions<AsasLandZoneDb> options, ILogger<IAsasLandZoneDb> logger) : base(options)
    {
        _logger = logger;
    }
    public DbSet<LZAgentBatch> AgentBatchs => Set<LZAgentBatch>();
    public DbSet<LZSchemaType> SchemaTypes => Set<LZSchemaType>();

    public Task<(bool isValid, string errorMessage)> Execute_InsertNewPackagetForAgentBatch_SP(InsertNewPackageSpInput input, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }

    public async Task<(bool isValid, string errorMessage)> Execute_StartNewBatchFroAgent_SP(StartNewBatchSPInput input, CancellationToken cancellationToken)
    {
        try
        {
            var affectedRowsParameter = new SqlParameter
            {
                ParameterName = "@AffectedRows",
                SqlDbType = SqlDbType.Int,
                Direction = ParameterDirection.Output
            };

            await Database.ExecuteSqlRawAsync(
                "EXEC [dbo].[AddNewBatche] " +
                "@SchemaTypeId, " +
                "@MigrationTypeId, " +
                "@PriorityLevelId, " +
                "@InstituteCode, " +
                "@BatchGUID, " +
                "@SchemaVersion, " +
                "@TotalRecordsCount, " +
                "@StartDate, " +
                "@AffectedRows OUTPUT",

                new SqlParameter("@SchemaTypeId", input.SchemaTypeId),
                new SqlParameter("@MigrationTypeId", input.MigrationTypeId),
                new SqlParameter("@PriorityLevelId", input.PriorityLevelId),
                new SqlParameter("@InstituteCode", input.InstituteCode),
                new SqlParameter("@BatchGUID", input.BatchId),
                new SqlParameter("@SchemaVersion", input.SchemaVersion),
                new SqlParameter("@TotalRecordsCount", input.TotalRecordsCount),
                new SqlParameter("@StartDate", input.StartDate),
                affectedRowsParameter);

            int affectedRows = (int)affectedRowsParameter.Value;
            _logger.LogInformation($"affected rows at landing zone {affectedRows} , the batch has been started successfully with landing zone");

            return (true, "the batch has been started successfully with landing zone");
        }
        catch (Exception ex) 
        {
            return (false, ex.Message);
        }
    }

    public Task<(bool isValid, string errorMessage)> Execute_StopCurrentForAgentBatch_SP(StopCurrentBatchSPInput input, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
        builder.ApplyConfiguration(new LZAgentBatchConfiguration());
        builder.ApplyConfiguration(new LZSchemaTypeConfiguration());
    }
}
