using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using NafathAPI.Extensions;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace NafathAPI.CrossCutting.OpenApi;


public static class OpenApiConfigExtension
    {

    public class EnumSchemaFilter : ISchemaFilter
        {
        public void Apply ( OpenApiSchema schema , SchemaFilterContext context )
            {
            if ( context.Type.IsEnum )
                {
                schema.Enum.Clear ( );
                Enum.GetNames ( context.Type )
                    .ToList ( )
                    .ForEach ( name => schema.Enum.Add ( new OpenApiString ( $"{name}" ) ) );
                }
            }
        }


    private static string GenerateOperationId ( ApiDescription dscr )
        {
        return $"{dscr.ActionDescriptor.RouteValues ["controller"]}" +
            $"_{dscr.ActionDescriptor.RouteValues ["action"].RemoveFromEnd ( "Async" )}" +
            $"_{dscr.HttpMethod}";
        }

    public static void AddOpenApiDocs ( this IServiceCollection services )
        {
        services.AddSwaggerGen ( config =>
        {

            config.SwaggerDoc ( "v1" , new OpenApiInfo ( )
                {
                Title = " Nafath-API" ,
                Version = "v1" ,
                TermsOfService = new Uri ( "https://www.tetco.sa" ) ,
                Description = "Nafath-API v1" ,
                Contact = new OpenApiContact ( ) { Name = "tetco.sa" , Email = "info@tetco.sa" , Url = new Uri ( "https://www.tetco.sa" ) }
                } );
            config.AddSecurityDefinition ( "APIKey" , new OpenApiSecurityScheme
                {
                Name = "APIKey" ,
                Type = SecuritySchemeType.ApiKey ,
                In = ParameterLocation.Header ,
                Description = "API Key Authentication" ,
                } );
            //config.AddSecurityDefinition ( "Bearer" , new OpenApiSecurityScheme ( )
            //   {
            //   Name = "Authorization" ,
            //   Type = SecuritySchemeType.ApiKey ,
            //   Scheme = "Bearer" ,
            //   BearerFormat = "JWT" ,
            //   In = ParameterLocation.Header ,
            //   Description = "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer Secret-Key\"" ,
            //   } );

            //config.AddSecurityRequirement ( new OpenApiSecurityRequirement {
            //       {
            //           new OpenApiSecurityScheme {
            //               Reference = new OpenApiReference {
            //                   Type = ReferenceType.SecurityScheme,
            //                       Id = "Bearer"
            //               }
            //           },
            //           new string[] {}
            //       }} );
            config.AddSecurityRequirement ( new OpenApiSecurityRequirement
                       {
                          {
                              new OpenApiSecurityScheme
                                 {
                                 Reference = new OpenApiReference
                     {
                         Type = ReferenceType.SecurityScheme,
                         Id = "APIKey" // Reference the API key security scheme
                     }
                 },
                 new string[] {}
             }
           } );
            config.UseInlineDefinitionsForEnums ( );

            config.CustomOperationIds ( e => GenerateOperationId ( e ) );

            config.SchemaFilter<EnumSchemaFilter> ( );

            //Locate the XML file being generated by ASP.NET...
            var xmlFile = $"{"api_doc"}.XML";
            var xmlPath = Path.Combine ( AppContext.BaseDirectory , xmlFile );

            //... and tell Swagger to use those XML comments.
            config.IncludeXmlComments ( xmlPath );

        } );
        }

    public static void UseOpenApiDocs ( this IApplicationBuilder app )
        {
        app.UseSwagger ( );
        app.UseSwaggerUI ( );
        }
    }
